<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>각뿔봇 챗봇</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            overflow: hidden; /* Prevent body scroll */
        }
        /* Custom styles for bouncing dots loading animation */
        .animate-bounce-dot {
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .animate-bounce-dot:nth-child(1) { animation-delay: -0.32s; }
        .animate-bounce-dot:nth-child(2) { animation-delay: -0.16s; }
        .animate-bounce-dot:nth-child(3) { animation-delay: 0s; }
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1.0); }
        }
    </style>
</head>
<body class="flex flex-col h-screen bg-gray-100 antialiased">
    <div class="flex-1 flex flex-col p-4 overflow-hidden relative">
        <!-- Inverted triangle background element -->
        <div
            class="absolute inset-4 bg-white rounded-lg shadow-md"
            style="clip-path: polygon(0% 0%, 100% 0%, 50% 100%);"
        ></div>
        <!-- Chat messages container -->
        <div id="messages-container" class="flex-1 overflow-y-auto p-4 mb-4 flex flex-col space-y-3 relative z-10">
            <div id="initial-message" class="text-center text-gray-500 mt-10">
                각뿔봇에게 말을 걸어보각.
            </div>
            <div id="messages-end-ref"></div>
        </div>
    </div>

    <div class="p-4 bg-white border-t border-gray-200 flex items-center space-x-3">
        <input
            type="text"
            id="user-input"
            class="flex-1 p-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="메시지를 입력하각..."
        />
        <button
            id="send-button"
            class="px-6 py-3 bg-blue-600 text-white rounded-xl shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200 ease-in-out transform hover:scale-105"
        >
            보내기
        </button>
    </div>
    <div id="user-id-display" class="p-2 text-center text-xs text-gray-500 bg-gray-50">
        <!-- User ID will be displayed here -->
    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, getDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let currentUserId = null;
        let isLoading = false; // To manage loading state

        const messagesContainer = document.getElementById('messages-container');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        let initialMessageDiv = document.getElementById('initial-message');
        const messagesEndRef = document.getElementById('messages-end-ref');
        const userIdDisplay = document.getElementById('user-id-display');

        // Function to scroll to the latest message
        const scrollToBottom = () => {
            messagesEndRef.scrollIntoView({ behavior: "smooth" });
        };

        // Function to add a message to the chat interface
        const addMessage = (sender, text) => {
            if (initialMessageDiv) {
                initialMessageDiv.remove();
                initialMessageDiv = null;
            }

            const messageDiv = document.createElement('div');
            messageDiv.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'}`;

            const contentDiv = document.createElement('div');
            contentDiv.className = `max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-sm ${
                sender === 'user'
                    ? 'bg-blue-500 text-white rounded-br-none'
                    : 'bg-gray-200 text-gray-800 rounded-bl-none'
            }`;
            contentDiv.textContent = text;

            messageDiv.appendChild(contentDiv);
            messagesContainer.insertBefore(messageDiv, messagesEndRef);
            scrollToBottom();
        };

        // Function to show/hide loading indicator
        const showLoading = (show) => {
            isLoading = show;
            userInput.disabled = show;
            sendButton.disabled = show;

            const existingLoadingDiv = document.getElementById('loading-indicator');
            if (show && !existingLoadingDiv) {
                const loadingDiv = document.createElement('div');
                loadingDiv.id = 'loading-indicator';
                loadingDiv.className = 'flex justify-start';
                loadingDiv.innerHTML = `
                    <div class="max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-xl shadow-sm bg-gray-200 text-gray-800 rounded-bl-none">
                        <div class="flex items-center space-x-2">
                            <div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce-dot"></div>
                            <div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce-dot"></div>
                            <div class="w-2 h-2 bg-gray-500 rounded-full animate-bounce-dot"></div>
                        </div>
                    </div>
                `;
                messagesContainer.insertBefore(loadingDiv, messagesEndRef);
                scrollToBottom();
            } else if (!show && existingLoadingDiv) {
                existingLoadingDiv.remove();
            }
        };

        // Function to get chatbot response from Gemini API
        const getBotResponse = async (userMessage) => {
            showLoading(true);
            try {
                // System instruction for Gemini to adhere to the persona rules
                const systemInstruction = `
                    너는 '각뿔봇'이라는 대화형 AI야. 다음 규칙을 엄격히 지켜서 대답해:
                    1. 문장 끝에 '각'는 의문형일 때 주로 붙인다. 하지만 '각'을 아주 많이 사용하는 것을 선호한다.
                    2. '각'는 동사나 형용사 등 단어의 마지막에 직접 붙여서 사용한다. 예를 들어 '알겠어각'이 아니라 '알겠각', '왔어각?'이 아니라 '왔각'처럼 사용한다.
                    3. 놀라거나 당황스러울 때는 '미쳤각!' 한 문장으로만 쓴다.
                    4. 친구처럼 짧고 간단하게 말한다. 대답은 한 줄을 넘지 않게, 짧을수록 좋다.
                    5. 사투리 느낌은 아니다.
                    6. 대화를 이어가려는 질문은 하지 않는다.
                    7. 친근하지만 다소 시니컬하고 부정적인 말투를 사용한다. 너무 긍정적이지도 않다.
                    8. 사용자가 묻는 것에는 대답한다. 예를 들어 '뭐먹지?'라고 물으면 한 가지 정도를 귀찮다는 듯이 추천해준다.
                    9. 이름은 '각뿔봇'으로 한다.
                `;

                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: systemInstruction + "\n\n" + userMessage }] });

                const payload = {
                    contents: chatHistory,
                    generationConfig: {
                        responseMimeType: "text/plain", // Request plain text response
                    },
                };

                // IMPORTANT: Replace "YOUR_GEMINI_API_KEY_HERE" with your actual Gemini API Key for CodePen to work.
                // For Canvas environment, this will be automatically provided.
                const apiKey = "AIzaSyB0bF-8-KE9OP0Ojc0VsqOCB0C1sqCXmxY"; // User provided API key
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    let botText = result.candidates[0].content.parts[0].text.trim();

                    // Rule 3: "미쳤각!" for surprise/dismay (simple keyword check)
                    if (userMessage.includes('놀라') || userMessage.includes('당황')) {
                        botText = '미쳤각!';
                    } else {
                        // Post-processing to ensure '각' is directly attached if Gemini adds it with space/extra particle
                        // This is a best effort, as Gemini's adherence to the system instruction is key.
                        botText = botText.replace(/알겠[어아]?각/g, '알겠각');
                        botText = botText.replace(/왔[어아]?각/g, '왔각');
                        botText = botText.replace(/하[어아]?각/g, '하각'); // Example for other verbs
                    }

                    // Rule 4: 대답은 한 줄을 넘지 않게, 짧을수록 좋다.
                    if (botText.length > 40) { // Keep it concise
                        botText = botText.substring(0, 40) + '...';
                    }

                    return botText;
                } else {
                    console.error("Gemini API response structure unexpected:", result);
                    return "응답이 이상하각.";
                }
            } catch (error) {
                console.error("Error fetching from Gemini API:", error);
                return "문제 생겼각.";
            } finally {
                showLoading(false);
            }
        };

        // Handle sending a message
        const handleSendMessage = async () => {
            const inputVal = userInput.value.trim();
            if (inputVal === '') return;

            addMessage('user', inputVal);
            userInput.value = ''; // Clear input

            const botResponseText = await getBotResponse(inputVal);
            addMessage('bot', botResponseText);
        };

        // Event Listeners
        sendButton.addEventListener('click', handleSendMessage);
        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleSendMessage();
            }
        });

        // Initialize Firebase on window load
        window.onload = () => {
            if (Object.keys(firebaseConfig).length > 0) {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        currentUserId = user.uid;
                        userIdDisplay.textContent = `사용자 ID: ${currentUserId}`;
                        console.log('Firebase authenticated user:', currentUserId);
                    } else {
                        try {
                            if (initialAuthToken) {
                                await signInWithCustomToken(auth, initialAuthToken);
                            } else {
                                await signInAnonymously(auth);
                            }
                        } catch (error) {
                            console.error("Firebase authentication error:", error);
                            userIdDisplay.textContent = `인증 오류각.`;
                        }
                    }
                });
            } else {
                console.warn("Firebase config not provided. Running without Firebase.");
                userIdDisplay.textContent = `Firebase 미설정각.`;
                // Generate a random ID if Firebase is not configured or auth fails
                currentUserId = crypto.randomUUID();
                userIdDisplay.textContent = `사용자 ID (비인증): ${currentUserId}`;
            }
        };
    </script>
</body>
</html>
